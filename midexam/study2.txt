웹 프로그래밍이란? => 브라우저를 통해 실행이 가능한 프로그램을 제작하는 것

user    =>  Input   => Client   => Request  => Server
        <=  Output  <=          <= Response <=

JS 의 특징
- 스크립트 언어라 컴파일 필요 없이 사용 가능
- 변수선언이 자유로움 => 형 구분 없이 선언 가능
- 웹만의 환경, 제약 조건에 특화 
- window, document 등 전역 변수 존재
- 기본적인 상태에서 파일에서 파일을 불러올 수 없음 (별도 장치 필요)
- 비동기적 프로그래밍이 자주, 자유롭게 쓰임

변수와 상수의 차이점?
변수 선언시 let을 사용하여 선언
상수 선언시 const를 사용하여 선언
* 유의사항 => 이름이 길어지더라도 담은 값이 어떤 건지 알 수 있도록 짓기

6종 기본변수타입
Number, String, Boolean, / Array, Object, Function

1) Number
- int, float 구분 X
- NaN => 숫자끼리의 연산이 아닌 경우 발생
- -(2^53 - 1) 과 2^53 - 1 사이

new Number(value); 
var a = new Number('123'); // a === 123은 false // a=[Number:123]
var b = Number('123'); // b === 123은 true      // b=123
a instanceof Number; // true
b instanceof Number; // false

Number('123')     // 123
Number('12.3')    // 12.3
Number('123e-1')  // 12.3
Number('')        // 0
Number(null)      // 0 
Number('0x11')    // 17
Number('0b11')    // 3
Number('0o11')    // 9
Number('foo')     // NaN
Number('100a')    // NaN

NaN은 다른 모든 값과 비교(==, !=, ===, !==)했을 때 같지 않으며, 다른 NaN과도 같지 않다.

NaN === NaN;        // false
Number.NaN === NaN; // false
isNaN(NaN);         // true
isNaN(Number.NaN);  // true

function valueIsNaN(v) { return v !== v; }
valueIsNaN(1);          // false
valueIsNaN(NaN);        // true
valueIsNaN(Number.NaN); // true

그러나 isNaN()과 Number.isNaN()의 차이를 주의해야 합니다. 
isNaN은 현재 값이 NaN이거나, 숫자로 변환했을 때 NaN이 되면 참을 반환하지만, 
Number.isNaN은 현재 값이 NaN이어야만 참을 반환합니다.

isNaN('hello world'); // true
Number.isNaN('hello world'); // false

let arr = [2, 4, NaN, 12];
arr.indexOf(NaN);                      // -1 (false)
arr.includes(NaN);                     // true
arr.findIndex(n => Number.isNaN(n));   // 2


2) String
''과 ""모두 사용 가능. ''추천
`` 템플릿 리터럴 사용 가능  // let z = `${x}안녕하세요`;
문자 안바꿈     : substr, substring, slice
문자 바꿈       :

"".concat({}); // [object Object]
"".concat([]); // ""
"".concat(null); // "null"
"".concat(true); // "true"
"".concat(4, 5); // "45"

'abc'.repeat(-1);   // RangeError
'abc'.repeat(0);    // ''
'abc'.repeat(1);    // 'abc'
'abc'.repeat(2);    // 'abcabc'
'abc'.repeat(3.5);  // 'abcabcabc' (count will be converted to integer)
'abc'.repeat(1/0);  // RangeError

return 'cat'[1]; // returns "a"

''.length       // 0
' '.length      // 1

.indexOf => 0base, 없으면 -1 반환, 대소문자 구분
.indexOf(searchTerm) // searchTerm의 첫 위치 시작 인덱스 반환. 
.indexOf(searchTerm, num)    // num 초과 인덱스 이후 용어 인덱스 반환, str.length보다 길면 무조건 -1 반환

'Blue Whale'.indexOf('Blue');     // returns  0
'Blue Whale'.indexOf('Blute');    // returns -1
'Blue Whale'.indexOf('Whale', 0); // returns  5
'Blue Whale'.indexOf('Whale', 5); // returns  5
'Blue Whale'.indexOf('Whale', 7); // returns -1
'Blue Whale'.indexOf('');         // returns  0
'Blue Whale'.indexOf('', 9);      // returns  9
'Blue Whale'.indexOf('', 10);     // returns 10
'Blue Whale'.indexOf('', 11);     // returns 10

존재 여부 판단방법
'Blue Whale'.indexOf('Blue') !== -1; // true
'Blue Whale'.indexOf('Bloe') !== -1; // false

.substring(시작인덱스(포함), 최종인덱스(불포함, 생략가능))
길이보다 클 경우 '' 반환
인덱스가 소수일경우 절댓값
(4,2) 넣으면 (2,4)로 자동 인식

var anyString = 'Mozilla';

const str = 'The quick brown fox jumps over the lazy dog.';
const words = str.split(' '); //어절 끊기
const chars = str.split(''); //문자 끊기
const strCopy = str.split(); // 문장 전체

const greeting = '   Hello world!   ';
console.log(greeting);  // expected output: "   Hello world!   ";
console.log(greeting.trim());   // expected output: "Hello world!";

// Displays 'M'
console.log(anyString.substring(0, 1));
console.log(anyString.substring(1, 0));

// Displays 'Mozill'
console.log(anyString.substring(0, 6));

// Displays 'lla'
console.log(anyString.substring(4));
console.log(anyString.substring(4, 7));
console.log(anyString.substring(7, 4));

// Displays 'Mozilla'
console.log(anyString.substring(0, 7));
console.log(anyString.substring(0, 10));

substring은 (시작인덱스, 종료인덱스)
substr 은 (시작인덱스, 개수)

str.slice(시작, 종료) 
- 시작점이 음수이면, 길이-음수 값부터 시작

3) Boolean
false : 0, -0, null, false, NaN, undefined, ''
true : 그 외 모든 것
NaN ? 4 : 3     // 3
0 ? 4 : 3       // 3
10 ? 4 : 3      // 4

4) Array
인자로 number, string, boolean, array, object, function 다 가능 
인덱스는 무조건 정수만 허용

a.forEach((item,index)=>console.log(item,index)); // 1.11 0  { happy: 'happy' } 1  [Function] 2  3 3

indexOf('') => 0 base, 없을시 -1 반환
a.3             //syntax error : Unexpected number
a.'aaaa'        //syntax error : Unexpected string
a['2']  // a[2]
a['02'] // undefined
a[02]   ===     a[2]            // true
a[02]   ===     a['2']          // true
a[7]='dd'    // [ 'aaaa', 'second', 'third', 'dfs', <3 empty items>, 'dd' ] length : 8
length 임의 조절 가능. 줄이면 그 길이 남기고 나머지 요소 삭제
a.length=10     
// [
  'aaaa',
  'second',
  'third',
  'dfs',
  <3 empty items>,
  'dd',
  <2 empty items>  => undefined
]
a.length=2 // [ 'aaaa', 'second' ]

메서드 (변형됨)
.fill(0,3,4)    // 0을 인덱스 3부터 4미만까지 채움.
.push('오렌지') // 맨 뒤에 항목 추가. 최종 길이 리턴
.pop()          // 맨 뒤 항목 제거. 제거 항목 리턴
.shift()        // 맨 앞 항목 제거. 제거 항목 리턴
.unshift('오렌지')      // 맨 앞 항목 추가. 최종 길이 리턴
.reverse()      // 순서 반대로. 배열 리턴
.splice(시작, 제거개수, 삽입값)     // 개수 0 : 추가, 개수 n=> 변경 후 1개, 변경값 여러개 삽입가능, 개수 없으면 그 이후 쭉 제거

.sort()         
items.sort(function(a,b){if(a.value>b.value){return 1;}if(a.value<b.value){return -1;} return 0;});     // 오름차순 정렬
=> 비교 함수 결과가 양수면, a 를 뒤로 보냄


메서드 (변형 안됨)
.slice(시작, 종료)      // 일부 발췌
.join()                 // 모든 요소를 연결한 하나의 문자열 반환
=> undefined, null은 빈 문자열로 '' 로됨
.concat(배열1, 배열2)                // 추가된 리스트 반환
추가 배열 자리에는, number, string, array 올 수 있으나, array는 내부 구성 원소 각각이 추가됨
.filter(필터함수)
[6,5,4,3,2,1].filter(value=>{return value>=3});    //[6,5,4,3]
.includes(검색어, 검색위치(생략가능))   // boolean 반환
.indexOf(검색어, 검색시작 위치)         // 인덱스 반환 없으면 -1
.toString()             // 모든 원소를 싹 묶어서 ,로 구분 합하여 하나의 스트링 반환

.find(검색함수) => 만족하는 첫 요소의 값 반환, 없으면 undefined
.findIndex(검색함수) => 첫 요소의 인덱스 반환
.keys() => 배열의 인덱스 값을 갖는 어레이 리턴
.map(변환함수) => 모든 요소에 함수를 처리하여 결과  배열 리턴
.reduce(함수, 초기값) 
=> var sum = [0, 1, 2, 3].reduce(function (accumulator, currentValue) {
  return accumulator + currentValue;
}, 0);
// sum is 6
모든 원소 합 더하는 함수 number.reduce(function(num1,num2){return num1+num2;})

5) Object
key, value 페어로 구성됨
항목간 순서가 없음. => index 없음
.나 []를 통해 값을 얻을 수 있음 // .은 ''X, []은 ''O
key는 
string : 굳이 ''안붙여도 됨. => 붙이면 자동제거
number : 자동으로 '' 붙음
동일한 key로 두번 입력하면 가장 나중 값이 적용됨. 

Object.assign(a,b);     // a에 b 덮어쓰기 // 변환됨
const obj={a:'hi',b:3,c:'4',4:[df]}

{ '4': 3, a: 'hi', b: 3, c: '4', '4c': 4 }
Object.keys(obj)        // array [ '4', 'a', 'b', 'c', '4c' ] 리턴
Object.values(obj)      // array [ 3, 'hi', 3, '4', 4 ] 리턴


6) Function
input은 많아도 되지만, return은 하나!
function은 function을 인수로 받을 수 있음. 